plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
//    maven {
//        name = "Modrinth"
//        url = "https://api.modrinth.com/maven"
//        content {
//            includeGroup "maven.modrinth"
//        }
//    }
    maven {
        name = "ModMenu"
        url "https://maven.terraformersmc.com/releases/"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    // modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"
    // ModMenu now requires an additional API
    // modImplementation "com.terraformersmc:modmenu:${rootProject.modmenu_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    implementation "com.electronwill.night-config:core:${rootProject.night_config_version}"
    implementation "com.electronwill.night-config:toml:${rootProject.night_config_version}"
    modImplementation(include("fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${rootProject.forge_config_api_port_version}"))
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
}
